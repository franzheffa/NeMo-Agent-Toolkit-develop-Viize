---
description: Follow these rules when the user's request involves creating, reinstalling, or deleting AIQ workflows
globs: 
alwaysApply: false
---
# AIQ Workflow Commands

This rule provides guidance for using `aiq workflow create`, `aiq workflow reinstall`, and `aiq workflow delete` commands effectively.

## aiq workflow create

Creates a new AIQ toolkit workflow using templates with boilerplate code.

### Basic Usage
```bash
aiq workflow create WORKFLOW_NAME
```

### Available Options
- `--install` / `--no-install`: Whether to install the workflow package immediately (default: install)
- `--workflow-dir TEXT`: Output directory for saving the created workflow (default: current directory)
- `--description TEXT`: Description for the workflow docstring and component metadata

### Examples
```bash
# Create a basic workflow with default settings
aiq workflow create my_rag_workflow

# Create workflow with custom description and don't install immediately
aiq workflow create my_rag_workflow --no-install --description "A custom RAG workflow for document processing"

# Create workflow in specific directory
aiq workflow create my_rag_workflow --workflow-dir ./my_workflows --description "Custom workflow for data analysis"
```

### What it generates
- Valid `pyproject.toml` file with plugin section
- `register.py` file with AIQ toolkit boilerplate code
- Configuration file for launching the workflow

## aiq workflow reinstall

Rebuilds and reinstalls a workflow package after modifications.

### Basic Usage
```bash
aiq workflow reinstall WORKFLOW_NAME
```

### When to use
- After modifying the workflow's Python code
- After updating dependencies in `pyproject.toml`
- After making changes to the workflow's configuration
- After adding new tools or components

### Example
```bash
# Reinstall after making code changes
aiq workflow reinstall my_rag_workflow
```

## aiq workflow delete

Removes a workflow package from the local environment and uninstalls it.

### Basic Usage
```bash
aiq workflow delete WORKFLOW_NAME
```

### Example
```bash
# Remove workflow completely
aiq workflow delete my_rag_workflow
```

## Best Practices

1. **Use descriptive workflow names**: Choose names that clearly indicate the workflow's purpose
2. **Always reinstall after code changes**: Use `aiq workflow reinstall` when modifying workflow code
3. **Use custom descriptions**: Provide meaningful descriptions when creating workflows
4. **Organize workflows**: Use `--workflow-dir` to organize workflows in dedicated directories
5. **Clean up unused workflows**: Use `aiq workflow delete` to remove workflows no longer needed

## Common Workflow
1. Create: `aiq workflow create my_workflow --description "Description of what it does"`
2. Develop: Modify the generated code in `register.py` and configuration
3. Test: Use `aiq run` or `aiq serve` to test the workflow
4. Update: Use `aiq workflow reinstall my_workflow` after code changes
5. Clean up: Use `aiq workflow delete my_workflow` when no longer needed
